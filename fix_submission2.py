import pandas as pd
import ast

# –ß–∏—Ç–∞–µ–º –¥–∞—Ç–∞—Å–µ—Ç —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å –∫–∞–∫–∏–µ ID –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å
try:
    df_dataset = pd.read_csv('dataset_1937770_3.txt')
    print("=== –ê–ù–ê–õ–ò–ó –î–ê–¢–ê–°–ï–¢–ê ===")
    print(f"Dataset —Å–æ–¥–µ—Ä–∂–∏—Ç {len(df_dataset)} —Å—Ç—Ä–æ–∫")
    print(f"ID –≤ dataset: –æ—Ç {df_dataset['id'].min()} –¥–æ {df_dataset['id'].max()}")
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ ID
    required_ids = sorted(df_dataset['id'].unique())
    print(f"–í—Å–µ–≥–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö ID: {len(required_ids)}")
    
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –¥–∞—Ç–∞—Å–µ—Ç–∞: {e}")
    # –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç–∞—Å–µ—Ç–∞, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º ID –æ—Ç 0 –¥–æ 1004
    required_ids = list(range(0, 1005))
    print("–ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–∏–∞–ø–∞–∑–æ–Ω ID: 0-1004")

print(f"–¢—Ä–µ–±—É–µ—Ç—Å—è ID: –æ—Ç {min(required_ids)} –¥–æ {max(required_ids)} (–≤—Å–µ–≥–æ {len(required_ids)})")

# –ß–∏—Ç–∞–µ–º submission —Ñ–∞–π–ª
try:
    df_submission = pd.read_csv('submission.csv')
    print(f"\n=== –ê–ù–ê–õ–ò–ó SUBMISSION –§–ê–ô–õ–ê ===")
    print(f"Submission —Å–æ–¥–µ—Ä–∂–∏—Ç {len(df_submission)} —Å—Ç—Ä–æ–∫")
    print(f"ID –≤ submission: –æ—Ç {df_submission['id'].min()} –¥–æ {df_submission['id'].max()}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ç–µ–∫—É—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞
    print("\n–ü—Ä–∏–º–µ—Ä—ã —Ç–µ–∫—É—â–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞ predicted_positions:")
    for i in range(min(5, len(df_submission))):
        print(f"  ID {df_submission.iloc[i]['id']}: {repr(df_submission.iloc[i]['predicted_positions'])}")
        
except Exception as e:
    print(f"–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è submission —Ñ–∞–π–ª–∞: {e}")
    print("–°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –ø—É—Å—Ç—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏ –¥–ª—è –≤—Å–µ—Ö ID")
    df_submission = pd.DataFrame({
        'id': required_ids,
        'predicted_positions': ['[]'] * len(required_ids)
    })

# –°–æ–∑–¥–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
print(f"\n=== –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï ===")

# –°–æ–∑–¥–∞–µ–º DataFrame —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ ID
df_fixed = pd.DataFrame({'id': required_ids})

if len(df_submission) > 0:
    # –ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞–µ–º submission –¥–∞–Ω–Ω—ã–µ
    df_sub_clean = df_submission.copy()
    df_sub_clean['id'] = df_sub_clean['id'].astype(int)
    
    # –ò—Å–ø—Ä–∞–≤–ª—è–µ–º —Ñ–æ—Ä–º–∞—Ç predicted_positions
    df_sub_clean['predicted_positions'] = df_sub_clean['predicted_positions'].astype(str)
    # –£–±–∏—Ä–∞–µ–º –∫–∞–≤—ã—á–∫–∏, –Ω–æ –æ—Å—Ç–∞–≤–ª—è–µ–º —Å—Ç—Ä–æ–∫–æ–≤—ã–π —Ç–∏–ø
    df_sub_clean['predicted_positions'] = df_sub_clean['predicted_positions'].str.replace('"', '')
    
    # –û–±—ä–µ–¥–∏–Ω—è–µ–º —Å –ø–æ–ª–Ω—ã–º —Å–ø–∏—Å–∫–æ–º ID
    df_fixed = df_fixed.merge(df_sub_clean[['id', 'predicted_positions']], 
                             on='id', how='left')
    
    print("–û–±—ä–µ–¥–∏–Ω–µ–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
else:
    df_fixed['predicted_positions'] = None

# –ó–∞–ø–æ–ª–Ω—è–µ–º –ø—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –ø—É—Å—Ç—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏
df_fixed['predicted_positions'] = df_fixed['predicted_positions'].fillna('[]')

print(f"–ò—Ç–æ–≥–æ–≤–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(df_fixed)}")

# –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
missing_count = (df_fixed['predicted_positions'] == '[]').sum()
print(f"–°—Ç—Ä–æ–∫ —Å –ø—É—Å—Ç—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏: {missing_count}")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
print(f"\n=== –†–ï–ó–£–õ–¨–¢–ê–¢ ===")
print("–ü–µ—Ä–≤—ã–µ 10 —Å—Ç—Ä–æ–∫:")
print(df_fixed.head(10))

print("\n–ü–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Å—Ç—Ä–æ–∫:")
print(df_fixed.tail(5))

# –í–∞–ª–∏–¥–∞—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∞
print(f"\n=== –í–ê–õ–ò–î–ê–¶–ò–Ø ===")
print(f"‚úì –ü—Ä–∞–≤–∏–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(df_fixed) == len(required_ids)}")
print(f"‚úì –í—Å–µ ID –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç: {set(df_fixed['id']) == set(required_ids)}")
print(f"‚úì –ù–µ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤: {len(df_fixed['id'].unique()) == len(df_fixed)}")

# –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –º–æ–∂–Ω–æ –ø–∞—Ä—Å–∏—Ç—å –∫–∞–∫ –º–∞—Å—Å–∏–≤—ã
validation_errors = 0
for i in range(min(10, len(df_fixed))):
    try:
        pos_str = df_fixed.iloc[i]['predicted_positions']
        parsed = ast.literal_eval(pos_str)
        if not isinstance(parsed, list):
            validation_errors += 1
            print(f"  –û—à–∏–±–∫–∞: —Å—Ç—Ä–æ–∫–∞ {i} –Ω–µ —è–≤–ª—è–µ—Ç—Å—è —Å–ø–∏—Å–∫–æ–º: {pos_str}")
    except Exception as e:
        validation_errors += 1
        print(f"  –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å—Ç—Ä–æ–∫–∏ {i}: {pos_str} - {e}")

if validation_errors == 0:
    print("‚úì –í—Å–µ –ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã")
else:
    print(f"‚ùå –ù–∞–π–¥–µ–Ω–æ –æ—à–∏–±–æ–∫: {validation_errors}")

# –°–æ—Ö—Ä–∞–Ω—è–µ–º
output_filename = 'submission_fixed_final.csv'
df_fixed.to_csv(output_filename, index=False)
print(f"\n‚úÖ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π —Ñ–∞–π–ª —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∫–∞–∫ '{output_filename}'")

# –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞
df_check = pd.read_csv(output_filename)
print(f"\n=== –ü–†–û–í–ï–†–ö–ê –°–û–•–†–ê–ù–ï–ù–ù–û–ì–û –§–ê–ô–õ–ê ===")
print(f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ —Å—Ç—Ä–æ–∫: {len(df_check)}")
print("–¢–∏–ø—ã –¥–∞–Ω–Ω—ã—Ö:")
print(df_check.dtypes)
print("\n–ü—Ä–∏–º–µ—Ä —Å–æ–¥–µ—Ä–∂–∏–º–æ–≥–æ:")
print(df_check.head(3))

# –°–æ–∑–¥–∞–µ–º –≤–µ—Ä—Å–∏–∏ —Å —Ä–∞–∑–Ω—ã–º–∏ —Ñ–æ—Ä–º–∞—Ç–∞–º–∏ –∫–∞–≤—ã—á–µ–∫
print(f"\n=== –°–û–ó–î–ê–ù–ò–ï –ê–õ–¨–¢–ï–†–ù–ê–¢–ò–í–ù–´–• –í–ï–†–°–ò–ô ===")

# –í–µ—Ä—Å–∏—è 1: –ë–ï–ó –∫–∞–≤—ã—á–µ–∫ (–∫–∞–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª)
with open('submission_fixed_no_quotes.csv', 'w', encoding='utf-8') as f:
    f.write('id,predicted_positions\n')
    for _, row in df_fixed.iterrows():
        positions = str(row['predicted_positions']).replace('"', '')
        f.write(f"{row['id']},{positions}\n")

# –í–µ—Ä—Å–∏—è 2: –í–°–ï –∑–Ω–∞—á–µ–Ω–∏—è predicted_positions –í –ö–ê–í–´–ß–ö–ê–•
with open('submission_fixed_with_quotes.csv', 'w', encoding='utf-8') as f:
    f.write('id,predicted_positions\n')
    for _, row in df_fixed.iterrows():
        positions = str(row['predicted_positions']).replace('"', '')  # –£–±–∏—Ä–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞–≤—ã—á–∫–∏
        f.write(f'{row["id"]},"{positions}"\n')  # –î–æ–±–∞–≤–ª—è–µ–º –∫–∞–≤—ã—á–∫–∏ –≤–æ–∫—Ä—É–≥ –∑–Ω–∞—á–µ–Ω–∏—è

print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –ë–ï–ó –∫–∞–≤—ã—á–µ–∫: 'submission_fixed_no_quotes.csv'")
print("‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª –° –∫–∞–≤—ã—á–∫–∞–º–∏: 'submission_fixed_with_quotes.csv'")

# –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–º–µ—Ä—ã —Ä–∞–∑–Ω—ã—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤
print("\n=== –°–†–ê–í–ù–ï–ù–ò–ï –§–û–†–ú–ê–¢–û–í ===")
print("–§–æ—Ä–º–∞—Ç –ë–ï–ó –∫–∞–≤—ã—á–µ–∫:")
with open('submission_fixed_no_quotes.csv', 'r', encoding='utf-8') as f:
    lines = f.readlines()
    for i in range(min(5, len(lines))):
        print(f"  {lines[i].strip()}")

print("\n–§–æ—Ä–º–∞—Ç –° –∫–∞–≤—ã—á–∫–∞–º–∏:")
with open('submission_fixed_with_quotes.csv', 'r', encoding='utf-8') as f:
    lines = f.readlines()
    for i in range(min(5, len(lines))):
        print(f"  {lines[i].strip()}")

print(f"\nüéØ –ò–¢–û–ì:")
print(f"1. –û—Å–Ω–æ–≤–Ω–æ–π —Ñ–∞–π–ª: {output_filename}")
print(f"2. –ë–ï–ó –∫–∞–≤—ã—á–µ–∫: submission_fixed_no_quotes.csv")
print(f"3. –° –ö–ê–í–´–ß–ö–ê–ú–ò: submission_fixed_with_quotes.csv")
print(f"4. –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–æ–∫: {len(df_fixed)}")
print(f"5. –î–∏–∞–ø–∞–∑–æ–Ω ID: {min(required_ids)} - {max(required_ids)}")
print("\n–§–æ—Ä–º–∞—Ç—ã:")
print('  - –ë–µ–∑ –∫–∞–≤—ã—á–µ–∫: 0,[1,5,10]')
print('  - –° –∫–∞–≤—ã—á–∫–∞–º–∏: 0,"[1,5,10]"')
print("\nüìã –†–ï–ö–û–ú–ï–ù–î–ê–¶–ò–ò:")
print("1. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–∞—á–∞–ª–∞ —Ñ–∞–π–ª –° –ö–ê–í–´–ß–ö–ê–ú–ò: submission_fixed_with_quotes.csv")
print("2. –ï—Å–ª–∏ –Ω–µ –ø—Ä–∏–º–µ—Ç - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –±–µ–∑ –∫–∞–≤—ã—á–µ–∫: submission_fixed_no_quotes.csv")
print("3. –û–±–∞ —Ñ–∞–π–ª–∞ —Å–æ–¥–µ—Ä–∂–∞—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–µ ID –æ—Ç 0 –¥–æ 1004 (1005 —Å—Ç—Ä–æ–∫)")
print("4. –ü—Ä–æ–ø—É—â–µ–Ω–Ω—ã–µ ID –∑–∞–ø–æ–ª–Ω–µ–Ω—ã –ø—É—Å—Ç—ã–º–∏ –º–∞—Å—Å–∏–≤–∞–º–∏ []")